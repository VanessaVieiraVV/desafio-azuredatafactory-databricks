{
	"name": "pip_copy_data_sql_adls_desafio",
	"properties": {
		"activities": [
			{
				"name": "LastModified",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from dbo.watermark where table_name = '@{pipeline().parameters.table_name_par}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable_gen",
						"type": "DatasetReference",
						"parameters": {
							"ds_name_table": {
								"value": "@pipeline().parameters.table_name_par",
								"type": "Expression"
							},
							"ds_schema_table": {
								"value": "@pipeline().parameters.schema_par",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "SetLastModified",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "LastModified",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "last_modified",
					"value": {
						"value": "@activity('LastModified').output.firstRow.LastModified",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Maxlastmodified",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT max(ModifiedDate) as ModifiedDate  FROM @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable_gen",
						"type": "DatasetReference",
						"parameters": {
							"ds_name_table": {
								"value": "@pipeline().parameters.table_name_par",
								"type": "Expression"
							},
							"ds_schema_table": {
								"value": "@pipeline().parameters.schema_par",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "SetMaxLastModified",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Maxlastmodified",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "max_valor_escrito",
					"value": {
						"value": "@activity('Maxlastmodified').output.firstRow.ModifiedDate",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Wait",
				"type": "Wait",
				"dependsOn": [
					{
						"activity": "SetLastModified",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetMaxLastModified",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"waitTimeInSeconds": 1
				}
			},
			{
				"name": "If Condition",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Wait",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('last_modified'), variables('max_valor_escrito'))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Copy data",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select * from @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par} where ModifiedDate > '@{variables('last_modified')}' and ModifiedDate <= '@{variables('max_valor_escrito')}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "ls_DataLakeStorage",
										"type": "LinkedServiceReference"
									},
									"path": "landing/stg"
								},
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Info",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "ls_DataLakeStorage",
											"type": "LinkedServiceReference"
										},
										"path": "landing/log"
									}
								},
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqlTable_gen",
									"type": "DatasetReference",
									"parameters": {
										"ds_name_table": {
											"value": "@pipeline().parameters.table_name_par",
											"type": "Expression"
										},
										"ds_schema_table": {
											"value": "@pipeline().parameters.schema_par",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Parquet",
									"type": "DatasetReference",
									"parameters": {
										"ds_container": {
											"value": "@pipeline().parameters.container_par",
											"type": "Expression"
										},
										"ds_directory": {
											"value": "@contains(pipeline().parameters.directory_par, pipeline().parameters.table_name_par)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Update watermark",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Databricks",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_AzureSqlDatabase",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": {
											"value": "update dbo.watermark\nset LastModified = '@{variables('max_valor_escrito')}'\nwhere table_name = '@{pipeline().parameters.table_name_par}'",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "GetFileName",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "Copy data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "Parquet",
									"type": "DatasetReference",
									"parameters": {
										"ds_container": {
											"value": "@pipeline().parameters.container_par",
											"type": "Expression"
										},
										"ds_directory": {
											"value": "@concat(pipeline().parameters.directory_par, pipeline().parameters.table_name_par)",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"itemName"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						},
						{
							"name": "Databricks",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "GetFileName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pip-desafio-adf-databricks-adventureworks",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"source_directory_par": {
										"value": "@pipeline().parameters.directory_par",
										"type": "Expression"
									},
									"dest_directory_par": {
										"value": "@pipeline().parameters.directory_par",
										"type": "Expression"
									},
									"file_name_par": {
										"value": "@activity('GetFileName').output.itemName",
										"type": "Expression"
									},
									"table_name_par": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									},
									"notebook_path_par": {
										"value": "@pipeline().parameters.notebook_path_par",
										"type": "Expression"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Web1",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": "https://prod-20.eastus2.logic.azure.com:443/workflows/6bd65841dfc04b659ad949fb8a30eb7c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=h-73peUiFdXW6-KCJTEn3-tdxBRdRejtQhiALkwgvsg",
								"method": "POST",
								"body": {
									"RUN_ID": "@{pipeline().RunId}",
									"TABLE_NAME": "@{pipeline().parameters.table_name_par}",
									"TIMESTAMP": "@{utcnow()}",
									"ERRODESCRIPTION": "NAO EXISTE NOVOS REGISTROS PARA ESTA TABELA",
									"TO": "vanessa.vieira.v.v.c@gmail.com",
									"SUBJECT": "INGESTAO DIARIA"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"schema_par": {
				"type": "string",
				"defaultValue": "SalesLT"
			},
			"table_name_par": {
				"type": "string",
				"defaultValue": "Customer"
			},
			"container_par": {
				"type": "string",
				"defaultValue": "desafio_adf"
			},
			"directory_par": {
				"type": "string",
				"defaultValue": "adventureworks/incremental/product"
			},
			"notebook_path_par": {
				"type": "string",
				"defaultValue": "/Users/vanessa.da.conceicao@avanade.com/Desafio_Caminhos/"
			}
		},
		"variables": {
			"last_modified": {
				"type": "String"
			},
			"max_valor_escrito": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-02-01T02:38:55Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}